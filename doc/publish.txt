

* Notes on publishing and promoting the pep pattern parser language system
  
 "pep" is an open source project which implements a simple but hopefully
 effective idea. It is a simple language which can recognise and
 translate/transform/compile languages and text dataformats. It implements a
 virtual machine which can create LR shift-reduce parsers/translators for some
 context-free languages. 
 
 I would like others to assess and collaborate with this system because I
 think it can simplify dramatically software development. Hence this current
 document.

CONTACTS FOR PUBLISHING OR PROMOTING THE PATTERN PARSER

 (.) means "already contacted"

 larry wall (email .)
 newsgroupsÑ comp.compilers (.), comp.lang.c (.)
 The llvm community
 compiler course instructors- universities
 fabrice bellard and tinycc community.
 forth community
 antlr community
 lex yacc community
 flex and bison community
 javac people
 Frank DeRemer and Tom Pennello: lalr people
 r.m.stallman: 
   I wrote an received an email reply. Not enthusiastic
 d.knuth + students
 eric s. raymond
 n.wirth + students
 rob pike (sam, acme person, go language)
 dennis ritchie
 brian kernighan
 bill joy (tcp person).
 ruby community
 python community

** accent compiler compiler
  Friedrich Wilhelm Schröer
  Fraunhofer Institute for Computer Architecture and Software Technology
  f.w.schroeer@first.fraunhofer.de

** unsw compiler research 
 Jingling Xue jingling@cse.unsw.edu.au (also, compilers for embedded systems)
 Manuel Chakravarty chak@cse.unsw.edu.au
 Gabriele Keller gabriele.keller@unsw.edu.au
 Hua Yan yanhuacs@outlook.com (research assistant)

** cs.cornell.edu
  andrew myers andru@cs.cornell.edu
  rolph recto rr729@cornell.edu

* university of gottenburg

bnfc project

Benjamin Lyngfelt 
Professor 
Akademisk grad: Docent, 
benjamin.lyngfelt@svenska.gu.se 

Markus Forsberg, 

 Alfred Aho, Monica Lam, Ravi Sethi, and Jeffrey Ullman, 
   compiler book people.
 alex aiken (stanford compiler course)
 email	aiken@cs.stanford.edu

ROADMAP FOR PUBLISHING

  copy core files to sourceforge download.
  make compiling instructions
  a debian package etc ?
  separate pep and ompep (the script viewer debugger)

  remove remaining memory bugs
  wrote pl/0 parser fk
  pl/0 to python compiler.
  javascript Machine object for browser testing, then generate

