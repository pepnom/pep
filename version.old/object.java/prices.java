/* Java code generated by 'compile.java.pss' */
import java.io.*; 
public class prices { 
  public static void main(String[] args) throws Exception { 
    Machine mm = new Machine(new InputStreamReader(System.in));
    script: 
    while (mm.eof() != true) {
      lex: { 
        // lexing phase
        mm.read();
        if (mm.testClass("[0-9]")) {
          mm.put();
          mm.clear();
          mm.add("digit*");
          mm.push();
        }
        // allow multiple spaces in some positions
        if (mm.testClass("[:space:]")) {
          mm.whilePeep("[:space:]");
          mm.put();
          mm.clear();
          mm.add("space*");
          mm.push();
        }
        // These literal tokens have their own name
        if (mm.workspace.toString().equals(".") || mm.workspace.toString().equals(",") || mm.workspace.toString().equals("$")) {
          mm.add("*");
          mm.push();
        }
        // show an error message if extraneous character in price
        if (!mm.workspace.toString().equals("")) {
          mm.add(" << illegal character at char ");
          mm.chars();
          mm.add(".\n");
          mm.print();
          break script;
        }
        // parsing phase
      }
      parse: 
      while (true) { 
        mm.pop();
        // 2 tokens
        mm.pop();
        // allow some leading space around the $ sign
        if (mm.workspace.toString().equals("space*$*") || mm.workspace.toString().equals("$*space*")) {
          mm.clear();
          mm.add("$*");
          mm.push();
          continue parse;
        }
        // allow some trailing and leading space.
        // this rule is not used because other rules are applied first
        // eg price = number cents ;
        if (mm.workspace.toString().equals("cents*space*")) {
          mm.clear();
          mm.add("cents*");
          mm.push();
          continue parse;
        }
        // allow some trailing and leading space.
        if (mm.workspace.toString().equals("price*space*")) {
          mm.clear();
          mm.add("price*");
          mm.push();
          continue parse;
        }
        if (mm.workspace.toString().equals("number*thousands*")) {
          mm.clear();
          mm.get();
          mm.increment();
          mm.get();
          mm.decrement();
          mm.put();
          if (mm.workspace.toString().startsWith("0")) {
            mm.clear();
            mm.add("number beginning with zero (");
            mm.get();
            mm.add(") at line ");
            mm.lines();
            mm.add("\n");
            mm.print();
            break script;
          }
          mm.clear();
          mm.add("number*");
          mm.push();
          continue parse;
        }
        if (mm.workspace.toString().equals("number*cents*")) {
          mm.clear();
          mm.get();
          mm.increment();
          mm.add(".");
          mm.get();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("price*");
          mm.push();
          continue parse;
        }
        mm.pop();
        if (mm.workspace.toString().equals("$*digit*thousands*")) {
          mm.clear();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.decrement();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("number*");
          mm.push();
          continue parse;
        }
        if (mm.workspace.toString().equals(".*digit*digit*")) {
          mm.clear();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.decrement();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("cents*");
          mm.push();
          continue parse;
        }
        if (mm.workspace.toString().equals("$*digit*cents*") || mm.workspace.toString().equals("$*number*cents*")) {
          mm.clear();
          mm.increment();
          mm.get();
          mm.increment();
          mm.add(".");
          mm.get();
          mm.decrement();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("price*");
          mm.push();
          continue parse;
        }
        mm.pop();
        if (mm.workspace.toString().equals("$*digit*digit*cents*")) {
          mm.clear();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.increment();
          mm.add(".");
          mm.get();
          mm.decrement();
          mm.decrement();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("price*");
          mm.push();
          continue parse;
        }
        if (mm.workspace.toString().equals("$*digit*digit*thousands*")) {
          mm.clear();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.decrement();
          mm.decrement();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("number*");
          mm.push();
          continue parse;
        }
        if (mm.workspace.toString().equals(",*digit*digit*digit*")) {
          mm.clear();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.decrement();
          mm.decrement();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("thousands*");
          mm.push();
          continue parse;
        }
        // 5 tokens
        mm.pop();
        if (mm.workspace.toString().equals("$*digit*digit*digit*cents*")) {
          mm.clear();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.increment();
          mm.add(".");
          mm.get();
          mm.decrement();
          mm.decrement();
          mm.decrement();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("price*");
          mm.push();
          continue parse;
        }
        if (mm.workspace.toString().equals("$*digit*digit*digit*thousands*")) {
          mm.clear();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.increment();
          mm.get();
          mm.decrement();
          mm.decrement();
          mm.decrement();
          mm.decrement();
          mm.put();
          mm.clear();
          mm.add("number*");
          mm.push();
          continue parse;
        }
        mm.push();
        mm.push();
        mm.push();
        mm.push();
        mm.push();
        if (mm.eof()) {
          mm.pop();
          if (!mm.workspace.toString().equals("price*")) {
            mm.clear();
            mm.add("No, not a price in the format $123,456.99 \n");
            mm.print();
            break script;
          }
          mm.clear();
          mm.add("Yes, its a price \n");
          mm.add("The price was: ");
          mm.get();
          mm.add("\n");
          mm.print();
          break script;
        }
        break parse;
      }
    }
  }
}
