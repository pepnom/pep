

   /* c code generated by "tr/translate.c.pss" */
   /* note: the translation script has not been debugged
            expect unusual results! */
#include <stdio.h> 
#include <string.h>
#include <time.h> 
#include <ctype.h> 
#include "colours.h"
#include "tapecell.h"
#include "tape.h"
#include "buffer.h"
#include "charclass.h"
#include "command.h"
#include "parameter.h"
#include "instruction.h"
#include "labeltable.h"
#include "program.h"
#include "machine.h"
#include "exitcode.h"
#include "machine.methods.h"
int main() {
  struct Machine machine;
  struct Machine * mm = &machine;
  newMachine(mm, stdin, 100, 10);

  script: 
  while (!mm->peep != EOF) {
    if (mm->peep == EOF) { break; } else { readChar(mm); }  /* read */
    if (0 == strcmp(mm->buffer.workspace, "[") || 0 == strcmp(mm->buffer.workspace, "]")) {
      add(mm, "*"); 
      push(mm);
    }
    if (workspaceInClassType(mm, "[:space:]")) {
      mm->buffer.workspace[0] = '\0';      /* clear */
    }
    if (0 != strcmp(mm->buffer.workspace, "")) {
      mm->buffer.workspace[0] = '\0';      /* clear */
      add(mm, "Sorry, only brackets [] allowed in this!\n"); 
      printf("%s", mm->buffer.workspace);  /* print */
      exit(0);
    }
    parse: 
    pop(mm);
    pop(mm);
    if (0 == strcmp(mm->buffer.workspace, "[*]*") || 0 == strcmp(mm->buffer.workspace, "ob*ob*")) {
      mm->buffer.workspace[0] = '\0';      /* clear */
      add(mm, "ob*"); 
      push(mm);
      goto parse;
    }
    pop(mm);
    if (0 == strcmp(mm->buffer.workspace, "[*ob*]*")) {
      mm->buffer.workspace[0] = '\0';      /* clear */
      add(mm, "ob*"); 
      push(mm);
      goto parse;
    }
    if (mm->peep == EOF) {
      if (0 == strcmp(mm->buffer.workspace, "ob*")) {
        mm->buffer.workspace[0] = '\0';      /* clear */
        add(mm, "good!\n"); 
        printf("%s", mm->buffer.workspace);  /* print */
        exit(0);
      }
      mm->buffer.workspace[0] = '\0';      /* clear */
      add(mm, "wrong\n"); 
      printf("%s", mm->buffer.workspace);  /* print */
      exit(0);
    }
    push(mm);
    push(mm);
    push(mm);
  }
}
