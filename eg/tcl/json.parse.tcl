#!/usr/bin/tclsh

# code generated by "translate.tcl.pss" a pep script
# see bumble.sf.net/books/pars/
#import sys    # 

  # make a new machine. Standard tcl doesnt have objects
  # so I will use an associative array, instead.
  #array set mm {
  #  eof false     # end of stream reached?
  #  charsRead 0   # how many chars already read
  #  linesRead 1   # how many lines already read
  #  escape "\\"
  #  delimiter "*" # push/pop delimiter (default "*")
  #  counter 0     # a counter for anything
  #  work ""       # the workspace
  #  stack {}    # stack for parse tokens 
  #  cell 0      # current tape cell
  #  size 100    # the initial tape/marks list size
  #  tape {}     # a list of attribute for tokens 
  #  marks {}    # marked tape cells
  #  peep [read stdin 1] 
  #}

  # make a new machine. Standard tcl doesnt have objects
  # so I will use an associative array, instead.
  array set mm {
    eof false     
    charsRead 0  
    linesRead 1 
    escape "\\"
    delimiter "*" 
    counter 0    
    work ""     
    stack {}   
    cell 0    
    size 0 
    tape {}  
    marks {}
    peep {} 
  }

  # Adds more elements to the tape and marks lists 
  proc MoreTape {} { 
    global mm
    for {set ii 0} {$ii < 100} {incr ii} { 
      lappend mm(tape) ""; lappend mm(marks) "";
    }
    incr mm(size) 100
  }

  # initialises a machine  
  proc Init {} { 
    global mm
    set mm(peep) [ read stdin 1 ]
    # or Read;
    MoreTape;
  }

  # read one character from the input stream and 
  #    update the machine.
  proc Read {} { 
    # use upvar eg
    # upvar $machine mm
    global mm
    if { $mm(eof) } { exit }
    incr mm(charsRead)
    # increment lines
    if { $mm(peep) eq "\n" } { incr mm(linesRead) }
    append mm(work) $mm(peep)
    set mm(peep) [ read stdin 1 ]
    if {[eof stdin]} { set mm(eof) true; set mm(peep) -1 }
  } 

  # increment tape pointer by one: trivial method? But need
  # to increase tape/marks size if exceeded
  proc Increment {} { global mm; incr mm(cell) } 

  # remove escape character: trivial method ?
  proc UnescapeChar {c} {
    global mm
    #if { $mm(work) ne "" } $mm(work = $mm(work.replace("\\"+c, c)
  }

  # add escape character : trivial
  proc EscapeChar {c} {
    global mm
    #if { $mm(work) ne "" } { $mm(work = $mm(work.replace(c, "\\"+c) }
  }

  # pop the first token from the stack into the workspace */
  proc Pop {} { 
    global mm
    if {[llength $mm(stack)] == 0} { return false }
    # prepend last stack item, and delete the item
    set mm(work) "[lindex $mm(stack) end]$mm(work)"
    set mm(stack) [lrange $mm(stack) 0 [expr [llength $mm(stack)]-2]] 
    if {$mm(cell) > 0} { incr mm(cell) -1 }
    return true
  }
  
  # push the first token from the workspace to the stack 
  proc Push {} {
    # lappend list $value
    # dont increment the tape pointer on an empty push
    global mm
    if { $mm(work) eq "" } { return false }
    # need to get this from the delimiter.
    set firstdelim [string first $mm(delimiter) $mm(work)]
    if {$firstdelim == -1} {
      lappend mm(stack) $mm(work)
      set mm(work) ""
      return true
    }
    lappend mm(stack) [string range $mm(work) 0 $firstdelim]
    set mm(work) [string range $mm(work) [expr {$firstdelim+1}] end]
    incr mm(cell) 1
    return true
  }

  # reads the input stream until the workspace end with text 
  proc Until {suffix} { 
    # read at least one character
    global mm
    if { $mm(eof) } { return }
    Read;
    while true { 
      if {$mm(eof)} { return }
      if {[string match *$suffix $mm(work)] && 
           ![string match *"$mm(escape)$suffix" $mm(work)] } { return }
      Read;
    }
  }  

  # maybe not required 
  proc Swap {} { 
    global mm
    set s $mm(work)
    set mm(work) $mm(tape)[$mm(cell)]
    # could be a problem if $s has spaces in it. (becomes a list)
    lset mm(tape) $mm(cell) $s
  }

  proc WriteToFile {} { 
    global mm
    set f [open sav.pp w 0600]  
    puts $f $mm(work)
    close $f
  }

  # useful for debugging, the "state" command
  proc State {} { 
    global mm
    puts "---------- Machine State --------------";
    puts -nonewline " Stack\[[join $mm(stack) {}]\] Work\[$mm(work)\] ";
    puts "Peep\[$mm(peep)\]";
    puts -nonewline " Acc:$mm(counter) Esc:$mm(escape) ";
    puts -nonewline "Delim:$mm(delimiter) Chars:$mm(charsRead) ";
    puts "Lines:$mm(linesRead)";
    puts "---------- Tape (size:$mm(size))  --------------";
    set ii 0
    while { $ii < 7 } {
      puts -nonewline "  $ii";
      if { $ii == $mm(cell) } { 
        puts -nonewline "> "
      } else { puts -nonewline "  " }
      # display marks
      if { [lindex $mm(marks) $ii] ne "" } { 
        puts -nonewline "\"[lindex $mm(marks) $ii]\" "
      } else { puts -nonewline ". " }

      puts "\[[lindex $mm(tape) $ii]\]";
      incr ii
    }
  }
  # end of tcl pep Machine "class" (array) definition

  # initialise the machine
  Init;
 
while !$mm(eof) { 
  
  # lex block 
  while true { 
    Read;           # read
    # Unlike Crockfords grammar, I will just completely ignore whitespace,
    # but this may not be acceptable in a rigorous application. Also, I
    # am just using the ctype.h definition of whitespace, whatever that 
    # may be.
    if {[regexp {^[[:space:]]+$} $mm(work)]} {
      set mm(work) "";   # clear
      break;  # .reparse 
    }
    if {[regexp {^[0-9]+$} $mm(work)]} {
      # while  
      while {[regexp {^[0-9]+$} $mm(peep)]} { if {$mm(eof)} { break; } Read }
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";   # clear
      append mm(work) "number*"
      Push;
      break;  # .reparse 
    }
    if {[regexp {^[a-z]+$} $mm(work)]} {
      # while  
      while {[regexp {^[a-z]+$} $mm(peep)]} { if {$mm(eof)} { break; } Read }
      if {$mm(work) ne "true" && $mm(work) ne "false" && $mm(work) ne "null"} {
        # handle error
        lset mm(tape) $mm(cell) $mm(work);  # put 
        set mm(work) "";   # clear
        append mm(work) "Unknown value '"
        append mm(work) [lindex $mm(tape) $mm(cell)]; # get
        append mm(work) "' at line "
        append mm(work) $mm(linesRead); # lines 
        append mm(work) " (character "
        append mm(work) $mm(charsRead); # chars 
        append mm(work) ").\n"
        puts -nonewline $mm(work);    # print
        exit;
      }
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";   # clear
      append mm(work) "value*"
      Push;
      break;  # .reparse 
    }
    if {$mm(work) eq "\""} {
      # save line number for error message
      set mm(work) "";   # clear
      append mm(work) $mm(linesRead); # lines 
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";   # clear
      Until {\"};
      if {$mm(eof)} {
        set mm(work) "";   # clear
        append mm(work) "Unterminated \" char, at line "
        append mm(work) [lindex $mm(tape) $mm(cell)]; # get
        append mm(work) "\n"
        puts -nonewline $mm(work);    # print
        exit;
      }
      if { $mm(work) ne "" } {
        set mm(work) [string range $mm(work) 0 end-1]
      }; # clip
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";   # clear
      append mm(work) "string*"
      Push;
      break;  # .reparse 
    }
    # literal tokens
    if {$mm(work) eq "," || $mm(work) eq ":" || $mm(work) eq "-" || $mm(work) eq "+" || $mm(work) eq "\[" || $mm(work) eq "\]" || $mm(work) eq "\{" || $mm(work) eq "\}"} {
      lset mm(tape) $mm(cell) $mm(work);  # put 
      append mm(work) "*"
      Push;
      break;  # .reparse 
    }
    break;
  }
  
  # parse block 
  while true {  
    # The parse/compile phase
    # --------------
    # 2 tokens
    Pop;
    Pop;
    # comma errors 
    if {$mm(work) eq "\{*,*" || $mm(work) eq ",*\}*" || $mm(work) eq "\[*,*" || $mm(work) eq ",*,*" || $mm(work) eq ",*\]*"} {
      set mm(work) "";   # clear
      append mm(work) "Misplaced , at line "
      append mm(work) $mm(linesRead); # lines 
      append mm(work) " ?(char "
      append mm(work) $mm(charsRead); # chars 
      append mm(work) ")\n"
      puts -nonewline $mm(work);    # print
      exit;
    }
    # catch object member errors 
    # also need to check that not only 1 token in on the stack
    # hence the !"member*" construct
    if {[string match {member**} $mm(work)] || [string match {members**} $mm(work)]} {
      if {$mm(work) ne "member*" && $mm(work) ne "members*" && ![string match *,* $mm(work)]  && ![string match *\}* $mm(work)] } {
        set mm(work) "";   # clear
        append mm(work) "Error after object member near line "
        append mm(work) $mm(linesRead); # lines 
        append mm(work) " (char "
        append mm(work) $mm(charsRead); # chars 
        append mm(work) ")\n"
        puts -nonewline $mm(work);    # print
        exit;
      }
    }
    # catch array errors 
    if {[string match {items**} $mm(work)]} {
      if {$mm(work) ne "items*" && ![string match *,* $mm(work)]  && ![string match *\]* $mm(work)] } {
        set mm(work) "";   # clear
        append mm(work) "Error after an array item near line "
        append mm(work) $mm(linesRead); # lines 
        append mm(work) " (char "
        append mm(work) $mm(charsRead); # chars 
        append mm(work) ")\n"
        puts -nonewline $mm(work);    # print
        exit;
      }
    }
    if {[string match {array**} $mm(work)] || [string match {object**} $mm(work)]} {
      if {$mm(work) ne "array*" && $mm(work) ne "object*" && ![string match *,* $mm(work)]  && ![string match *\}* $mm(work)]  && ![string match *\]* $mm(work)] } {
        set mm(work) "";   # clear
        append mm(work) "Error after array or object near line "
        append mm(work) $mm(linesRead); # lines 
        append mm(work) " (char "
        append mm(work) $mm(charsRead); # chars 
        append mm(work) ")\n"
        puts -nonewline $mm(work);    # print
        exit;
      }
    }
    # invalid string sequence
    if {[string match {string**} $mm(work)]} {
      if {$mm(work) ne "string*" && ![string match *,* $mm(work)]  && ![string match *\]* $mm(work)]  && ![string match *\}* $mm(work)]  && ![string match *:* $mm(work)] } {
        set mm(work) "";   # clear
        append mm(work) "Error after a string near line "
        append mm(work) $mm(linesRead); # lines 
        append mm(work) " (char "
        append mm(work) $mm(charsRead); # chars 
        append mm(work) ")\n"
        puts -nonewline $mm(work);    # print
        exit;
      }
    }
    # transmogrify into array item, start array
    if {$mm(work) eq "\[*number*" || $mm(work) eq "\[*string*" || $mm(work) eq "\[*value*" || $mm(work) eq "\[*array*" || $mm(work) eq "\[*object*"} {
      set mm(work) "";   # clear
      append mm(work) "\[*items*"
      Push;
      Push;
      continue;   # .reparse 
    }
    # signed numbers
    if {$mm(work) eq "-*number*"} {
      # nop: no operation 
    }
    # empty arrays are legal json
    if {$mm(work) eq "\[*\]*"} {
      set mm(work) "";   # clear
      append mm(work) "array*"
      Push;
      continue;   # .reparse 
    }
    # empty objects are legal json
    if {$mm(work) eq "\{*\}*"} {
      set mm(work) "";   # clear
      append mm(work) "object*"
      Push;
      continue;   # .reparse 
    }
    # --------------
    # 3 tokens
    Pop;
    # arrays, 
    if {$mm(work) eq "\[*items*\]*"} {
      set mm(work) "";   # clear
      append mm(work) "array*"
      Push;
      continue;   # .reparse 
    }
    # 
    if {$mm(work) eq "items*,*number*" || $mm(work) eq "items*,*string*" || $mm(work) eq "items*,*value*" || $mm(work) eq "items*,*array*" || $mm(work) eq "items*,*object*"} {
      set mm(work) "";   # clear
      append mm(work) "items*"
      Push;
      continue;   # .reparse 
    }
    # object members
    if {$mm(work) eq "string*:*number*" || $mm(work) eq "string*:*string*" || $mm(work) eq "string*:*value*" || $mm(work) eq "string*:*object*" || $mm(work) eq "string*:*array*"} {
      set mm(work) "";   # clear
      append mm(work) "member*"
      Push;
      continue;   # .reparse 
    }
    # multiple elements of an object
    if {$mm(work) eq "member*,*member*" || $mm(work) eq "members*,*member*"} {
      set mm(work) "";   # clear
      append mm(work) "members*"
      Push;
      continue;   # .reparse 
    }
    #  
    if {$mm(work) eq "\{*members*\}*" || $mm(work) eq "\{*member*\}*"} {
      set mm(work) "";   # clear
      append mm(work) "object*"
      Push;
      continue;   # .reparse 
    }
    Push;
    Push;
    Push;
    if {$mm(eof)} {
      while [Pop] {};           # unstack 
      if {$mm(work) eq "object*" || $mm(work) eq "array*" || $mm(work) eq "value*" || $mm(work) eq "string*" || $mm(work) eq "number*"} {
        while [Push] {};          # stack 
        append mm(work) "Valid json! Top level item was '"
        puts -nonewline $mm(work);    # print
        set mm(work) "";   # clear
        Pop;
        if { $mm(work) ne "" } {
          set mm(work) [string range $mm(work) 0 end-1]
        }; # clip
        append mm(work) "'\n"
        puts -nonewline $mm(work);    # print
        set mm(work) "";   # clear
        exit;
      }
      while [Push] {};          # stack 
      append mm(work) "Maybe not valid json.\n"
      append mm(work) "The parse stack was \n"
      puts -nonewline $mm(work);    # print
      set mm(work) "";   # clear
      while [Pop] {};           # unstack 
      append mm(work) "\n"
      puts -nonewline $mm(work);    # print
    }
    break; 
  }
  
}
# end of generated code
