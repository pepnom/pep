#!/usr/bin/tclsh

# code generated by "translate.tcl.pss" a pep script
# see bumble.sf.net/books/pars/
#import sys    # 

  # make a new machine. Standard tcl doesnt have objects
  # so I will use an associative array, instead.
  #array set mm {
  #  eof false     # end of stream reached?
  #  charsRead 0   # how many chars already read
  #  linesRead 1   # how many lines already read
  #  escape "\\"
  #  delimiter "*" # push/pop delimiter (default "*")
  #  counter 0     # a counter for anything
  #  work ""       # the workspace
  #  stack {}    # stack for parse tokens 
  #  cell 0      # current tape cell
  #  size 100    # the initial tape/marks list size
  #  tape {}     # a list of attribute for tokens 
  #  marks {}    # marked tape cells
  #  peep [read stdin 1] 
  #}

  # make a new machine. Standard tcl doesnt have objects
  # so I will use an associative array, instead.
  array set mm {
    eof false     
    charsRead 0  
    linesRead 1 
    escape "\\"
    delimiter "*" 
    counter 0    
    work ""     
    stack {}   
    cell 0    
    size 0 
    tape {}  
    marks {}
    peep {} 
  }

  # Adds more elements to the tape and marks lists 
  proc MoreTape {} { 
    global mm
    for {set ii 0} {$ii < 100} {incr ii} { 
      lappend mm(tape) ""; lappend mm(marks) "";
    }
    incr mm(size) 100
  }

  # initialises a machine  
  proc Init {} { 
    global mm
    set mm(peep) [ read stdin 1 ]
    # or Read;
    MoreTape;
  }

  # read one character from the input stream and 
  #    update the machine.
  proc Read {} { 
    # use upvar eg
    # upvar $machine mm
    global mm
    if { $mm(eof) } { exit }
    incr mm(charsRead)
    # increment lines
    if { $mm(peep) eq "\n" } { incr mm(linesRead) }
    append mm(work) $mm(peep)
    set mm(peep) [ read stdin 1 ]
    if {[eof stdin]} { set mm(eof) true; set mm(peep) -1 }
  } 

  # increment tape pointer by one: trivial method? But need
  # to increase tape/marks size if exceeded
  proc Increment {} { global mm; incr mm(cell) } 

  # remove escape character: trivial method ?
  proc UnescapeChar {c} {
    global mm
    #if { $mm(work) ne "" } $mm(work = $mm(work.replace("\\"+c, c)
  }

  # add escape character : trivial
  proc EscapeChar {c} {
    global mm
    #if { $mm(work) ne "" } { $mm(work = $mm(work.replace(c, "\\"+c) }
  }

  # pop the first token from the stack into the workspace */
  proc Pop {} { 
    global mm
    if {[llength $mm(stack)] == 0} { return false }
    # prepend last stack item, and delete the item
    set mm(work) "[lindex $mm(stack) end]$mm(work)"
    set mm(stack) [lrange $mm(stack) 0 [expr [llength $mm(stack)]-2]] 
    if {$mm(cell) > 0} { incr mm(cell) -1 }
    return true
  }
  
  # push the first token from the workspace to the stack 
  proc Push {} {
    # lappend list $value
    # dont increment the tape pointer on an empty push
    global mm
    if { $mm(work) eq "" } { return false }
    # need to get this from the delimiter.
    set firstdelim [string first $mm(delimiter) $mm(work)]
    if {$firstdelim == -1} {
      lappend mm(stack) $mm(work)
      set mm(work) ""
      incr mm(cell) 1
      # a hack because "stack" hangs otherwise (never returns false)
      return false
      #return true
    }
    lappend mm(stack) [string range $mm(work) 0 $firstdelim]
    set mm(work) [string range $mm(work) [expr {$firstdelim+1}] end]
    incr mm(cell) 1
    return true
  }

  # a helper function
  proc CountEscapes {suffix} {
    if {$mm(work)} {}
  }

  # reads the input stream until the workspace end with text 
  proc Until {suffix} { 
    # read at least one character
    global mm
    if { $mm(eof) } { return }
    Read;
    while true { 
      if {$mm(eof)} { return }
      # no! check! this must count trailing escapes
      if {[string match *$suffix $mm(work)] && 
           ![string match *"$mm(escape)$suffix" $mm(work)] } { return }
      Read;
    }
  }  

  # maybe not required 
  proc Swap {} { 
    global mm
    set s $mm(work)
    set mm(work) $mm(tape)[$mm(cell)]
    # could be a problem if $s has spaces in it. (becomes a list)
    lset mm(tape) $mm(cell) $s
  }

  proc WriteToFile {} { 
    global mm
    set f [open sav.pp w 0600]  
    puts $f $mm(work)
    close $f
  }

  # useful for debugging, the "state" command
  proc State {} { 
    global mm
    puts "---------- Machine State --------------";
    puts -nonewline " Stack\[[join $mm(stack) {}]\] Work\[$mm(work)\] ";
    puts "Peep\[$mm(peep)\]";
    puts -nonewline " Acc:$mm(counter) Esc:$mm(escape) ";
    puts -nonewline "Delim:$mm(delimiter) Chars:$mm(charsRead) ";
    puts "Lines:$mm(linesRead)";
    puts "---------- Tape (size:$mm(size))  --------------";
    set ii 0
    while { $ii < 7 } {
      puts -nonewline "  $ii";
      if { $ii == $mm(cell) } { 
        puts -nonewline "> "
      } else { puts -nonewline "  " }
      # display marks
      if { [lindex $mm(marks) $ii] ne "" } { 
        puts -nonewline "\"[lindex $mm(marks) $ii]\" "
      } else { puts -nonewline ". " }

      puts "\[[lindex $mm(tape) $ii]\]";
      incr ii
    }
  }
  # end of tcl pep Machine "class" (array) definition

  # initialise the machine
  Init;
 
append mm(work) "" 
append mm(work) "\n    An attempt at basic natural language parsing. " 
append mm(work) "\n    Use the following words in simple sentences: " 
append mm(work) "\n" 
append mm(work) "\n     articles: the, this, her, his, a, one, some, " 
append mm(work) "\n     preposition: up, in, at, on, with, under, to" 
append mm(work) "\n     adjectives: simple, big, small, blue, beautiful, small," 
append mm(work) "\n     nouns: flower, tree, dog, house, horse, girl, fish, meat," 
append mm(work) "\n     verbs: runs, eats, sleeps, is, grows, digs, sings" 
append mm(work) "\n" 
append mm(work) "\n    End the sentence with a full stop \".\"" 
append mm(work) "\n      eg: the small dog eats fish." 
append mm(work) "\n      eg: the simple horse runs on the house ." 
append mm(work) "\n   .\n"
puts -nonewline $mm(work);    # print
set mm(work) "";       # clear
while !$mm(eof) { 
  
  # lex block 
  while true { 
    Read;           # read
    if {[regexp {^[[:alpha:]]+$} $mm(work)]} {
      # while  
      while {[regexp {^[[:alpha:]]+$} $mm(peep)]} { if {$mm(eof)} { break; } Read }
      lset mm(tape) $mm(cell) $mm(work);  # put 
      if {$mm(work) eq "the" || $mm(work) eq "this" || $mm(work) eq "her" || $mm(work) eq "his" || $mm(work) eq "a" || $mm(work) eq "one" || $mm(work) eq "some"} {
        set mm(work) "";       # clear
        append mm(work) "article*"
        Push;
        break;  # .reparse 
      }
      if {$mm(work) eq "up" || $mm(work) eq "in" || $mm(work) eq "at" || $mm(work) eq "on" || $mm(work) eq "with" || $mm(work) eq "under" || $mm(work) eq "to"} {
        set mm(work) "";       # clear
        append mm(work) "preposition*"
        Push;
        break;  # .reparse 
      }
      if {$mm(work) eq "simple" || $mm(work) eq "big" || $mm(work) eq "small" || $mm(work) eq "blue" || $mm(work) eq "beautiful" || $mm(work) eq "small"} {
        set mm(work) "";       # clear
        append mm(work) "adjective*"
        Push;
        break;  # .reparse 
      }
      if {$mm(work) eq "flower" || $mm(work) eq "tree" || $mm(work) eq "dog" || $mm(work) eq "house" || $mm(work) eq "horse" || $mm(work) eq "girl" || $mm(work) eq "fish" || $mm(work) eq "meat"} {
        set mm(work) "";       # clear
        append mm(work) "noun*"
        Push;
        break;  # .reparse 
      }
      if {$mm(work) eq "runs" || $mm(work) eq "eats" || $mm(work) eq "sleeps" || $mm(work) eq "is" || $mm(work) eq "grows" || $mm(work) eq "digs" || $mm(work) eq "sings"} {
        set mm(work) "";       # clear
        append mm(work) "verb*"
        Push;
        break;  # .reparse 
      }
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";       # clear
      append mm(work) "<"
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      append mm(work) ">"
      append mm(work) " Sorry, don't understand that word! \n"
      puts -nonewline $mm(work);    # print
      set mm(work) "";       # clear
      exit;
    }
    # use a full-stop to complete sentence
    if {$mm(work) eq "."} {
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";       # clear
      append mm(work) "dot*"
      Push;
    }
    # ignore every thing else
    set mm(work) "";       # clear
    break;
  }
  
  # parse block 
  while true {  
    # 2 tokens
    Pop;
    Pop;
    if {$mm(work) eq "article*noun*"} {
      set mm(work) "";       # clear
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      append mm(work) " "
      if { $mm(cell) >= $mm(size) } { MoreTape; }
      incr mm(cell);                             # ++
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      if { $mm(cell) > 0 } { incr mm(cell) -1 };  # --
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";       # clear
      append mm(work) "nounphrase*"
      Push;
      continue;   # .reparse 
    }
    if {$mm(work) eq "verb*preposition*"} {
      set mm(work) "";       # clear
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      append mm(work) " "
      if { $mm(cell) >= $mm(size) } { MoreTape; }
      incr mm(cell);                             # ++
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      if { $mm(cell) > 0 } { incr mm(cell) -1 };  # --
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";       # clear
      append mm(work) "verbphrase*"
      Push;
      continue;   # .reparse 
    }
    # 3 tokens
    Pop;
    if {$mm(work) eq "noun*verb*dot*" || $mm(work) eq "nounphrase*verb*dot*" || $mm(work) eq "noun*verbphrase*dot*" || $mm(work) eq "nounphrase*verbphrase*dot*"} {
      set mm(work) "";       # clear
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      append mm(work) " "
      if { $mm(cell) >= $mm(size) } { MoreTape; }
      incr mm(cell);                             # ++
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      if { $mm(cell) > 0 } { incr mm(cell) -1 };  # --
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";       # clear
      append mm(work) "sentence*"
      Push;
      continue;   # .reparse 
    }
    if {$mm(work) eq "article*adjective*noun*"} {
      set mm(work) "";       # clear
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      append mm(work) " "
      if { $mm(cell) >= $mm(size) } { MoreTape; }
      incr mm(cell);                             # ++
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      append mm(work) " "
      if { $mm(cell) >= $mm(size) } { MoreTape; }
      incr mm(cell);                             # ++
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      if { $mm(cell) > 0 } { incr mm(cell) -1 };  # --
      if { $mm(cell) > 0 } { incr mm(cell) -1 };  # --
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";       # clear
      append mm(work) "nounphrase*"
      Push;
      continue;   # .reparse 
    }
    # 4 tokens
    Pop;
    if {$mm(work) eq "nounphrase*verb*noun*dot*" || $mm(work) eq "noun*verb*noun*dot*" || $mm(work) eq "nounphrase*verb*nounphrase*dot*" || $mm(work) eq "noun*verb*nounphrase*dot*" || $mm(work) eq "nounphrase*verbphrase*nounphrase*dot*" || $mm(work) eq "noun*verbphrase*nounphrase*dot*" || $mm(work) eq "nounphrase*verbphrase*noun*dot*" || $mm(work) eq "noun*verbphrase*noun*dot*"} {
      set mm(work) "";       # clear
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      append mm(work) " "
      if { $mm(cell) >= $mm(size) } { MoreTape; }
      incr mm(cell);                             # ++
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      append mm(work) " "
      if { $mm(cell) >= $mm(size) } { MoreTape; }
      incr mm(cell);                             # ++
      append mm(work) [lindex $mm(tape) $mm(cell)]; # get
      if { $mm(cell) > 0 } { incr mm(cell) -1 };  # --
      if { $mm(cell) > 0 } { incr mm(cell) -1 };  # --
      lset mm(tape) $mm(cell) $mm(work);  # put 
      set mm(work) "";       # clear
      append mm(work) "sentence*"
      Push;
      continue;   # .reparse 
    }
    Push;
    Push;
    Push;
    Push;
    if {$mm(eof)} {
      Pop;
      Pop;
      if {$mm(work) eq "sentence*"} {
        set mm(work) "";       # clear
        append mm(work) "It's an english sentence! \n("
        append mm(work) [lindex $mm(tape) $mm(cell)]; # get
        append mm(work) ") \n"
        append mm(work) "But it may not make sense! \n"
        puts -nonewline $mm(work);    # print
        set mm(work) "";       # clear
        exit;
      }
      if {$mm(work) eq "nounphrase*"} {
        set mm(work) "";       # clear
        append mm(work) "its a noun-phrase! ("
        append mm(work) [lindex $mm(tape) $mm(cell)]; # get
        append mm(work) ") \n"
        puts -nonewline $mm(work);    # print
        set mm(work) "";       # clear
        exit;
      }
      if {$mm(work) eq "verbphrase*"} {
        set mm(work) "";       # clear
        append mm(work) "its a verb-phrase! ("
        append mm(work) [lindex $mm(tape) $mm(cell)]; # get
        append mm(work) ") \n"
        puts -nonewline $mm(work);    # print
        set mm(work) "";       # clear
        exit;
      }
      Push;
      Push;
      append mm(work) "nope, not a sentence. \n"
      puts -nonewline $mm(work);    # print
      set mm(work) "";       # clear
      append mm(work) "The parse stack was: \n  "
      puts -nonewline $mm(work);    # print
      set mm(work) "";       # clear
      while {[Pop]} {};           # unstack 
      append mm(work) "\n"
      puts -nonewline $mm(work);    # print
      exit;
    }
    break; 
  }
  
}
# end of generated code
